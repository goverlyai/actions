name: "Setup Github Actions"
description: Runs Series of Actions for Github CI/CD
author: Goverly AI

inputs:
  username:
    description: "Docker Hub Username"
    required: false
  
  password:
    description: "Docker Hub Password"
    required: false

  registry:
    description: "Alternate Registry Endpoint"
    required: false
  
  registry_username:
    description: "Alternate Registry Username"
    required: false
  
  registry_password:
    description: "Alternate Registry Password"
    required: false
  
  aws_region:
    description: "AWS Region"
    required: false
    default: 'us-east-1'
  
  aws_access_key_id:
    description: "AWS Access Key ID"
    required: false
  
  aws_secret_access_key:
    description: "AWS Secret Access Key"
    required: false
  
  ecr_repository:
    description: "AWS ECR Repository"
    required: false

  ghcr_username:
    description: "GHCR username. Usually set from the github.actor variable"
    required: false

  ghcr_password:
    description: "GHCR password. Usually set from the secrets.GITHUB_TOKEN variable"
    required: false
  
  setup_docker:
    description: "Sets up Docker Context, QEMU and Buildx"
    required: false
    default: 'true'
  
  buildcloud_org:
    description: "Buildcloud Organization"
    required: false
    default: ''

  setup_depot:
    description: "Sets up Depot"
    required: false
    default: 'false'
  
  prepull_image:
    description: "Fetches an image prior to build"
    required: false
    default: ''
  
  checkout_enabled:
    description: "Run Git Checkout"
    required: false
    default: 'true'
  
  checkout_repo:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
  
  checkout_branch:
    description: "Which branch to checkout"
    required: false
    default: ''

  checkout_fetch_depth:
    description: "Checkout Fetch Depth"
    required: false
    default: ${{ 1 }}
  
  create_tag_target:
    description: "Creates Tag Target. Creates a Tag Target based on Branch such as v0.0.1-prod-xxx -> v0.0.1-prod-[datetimestr] if value is set as 'rc'"
    required: false
    default: ''
  
  driver-opts:
    description: 'List of additional driver-specific options. (eg. image=moby/buildkit:master)'
    required: false
    default: |
      image=moby/buildkit:master
  
  buildkitd-flags:
    description: 'Flags for buildkitd daemon'
    default: '--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host'
    required: false
  
  semantic_version_enabled:
    description: "Enable Semantic Versioning"
    required: false
    default: 'false'

  semantic_version_tag_prefix:
    description: "Semantic Versioning: Tag Prefix"
    required: false
    default: 'v'
  
  semantic_version_major_pattern:
    description: "Semantic Versioning: Major Release Pattern v${major}.x.x"
    required: false
    default: "Release:"
  
  semantic_version_minor_pattern:
    description: "Semantic Versioning: Minor Release Pattern vx.${minor}.x"
    required: false
    default: 'feat:'
  
  semantic_version_format:
    description: "Semantic Versioning: Format v${major}.${minor}.${patch}"
    required: false
    default: 'v${major}.${minor}.${patch}'

  semantic_version_bump_each_commit:
    description: "Semantic Versioning: Bump Each Commit"
    required: false
    default: ${{ true }}

  semantic_version_include_timestamp:
    description: "Semantic Versioning: Include Timestamp"
    required: false
    default: ${{ true }}


outputs:
  sha_short:
    description: "The short SHA used for image builds"
    value: ${{ steps.vars.outputs.sha_short }}
  
  ecr_repository_uri:
    description: URI of the repository, i.e. ACCOUNT.dkr.ecr.REGION.amazonaws.com/NAME
    value: ${{ steps.vars.outputs.create_ecr_repo }}
  
  semantic_version_tag:
    description: Results of Semantic Version
    value: ${{ steps.semantic-version.outputs.version }}
  
  semantic_version_timestamp_tag:
    description: Results of Semantic Version with Timestamp
    value: ${{ steps.semantic-version-timestamp.outputs.tag }}

runs:
  using: "composite"
  steps:
    - name: Setup Depot
      if: ${{ inputs.setup_depot == 'true' }}
      uses: depot/setup-action@v1

    - name: Checkout
      if: ${{ inputs.checkout_enabled == 'true' && inputs.semantic_version_enabled != 'true' && inputs.checkout_branch == '' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        repository: ${{ inputs.checkout_repo }}
        fetch-depth: ${{ inputs.checkout_fetch_depth }}

    - name: Checkout - With Ref
      if: ${{ inputs.checkout_enabled == 'true' && inputs.semantic_version_enabled != 'true' && inputs.checkout_branch != '' }}
      uses: actions/checkout@v3
      with:
        repository: ${{ inputs.checkout_repo }}
        ref: ${{ inputs.checkout_branch }}
        fetch-depth: ${{ inputs.checkout_fetch_depth }}
    
    - name: Checkout - Semantic Versioning
      if: ${{ inputs.checkout_enabled == 'true' && inputs.semantic_version_enabled == 'true' }}
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        repository: ${{ inputs.checkout_repo }}
        fetch-depth: 0

    - name: Get Short SHA
      id: vars
      run: |
        echo ::set-output name=sha_short::${GITHUB_SHA::7}
      shell: bash
    
    - name: Semantic versioning
      if: ${{ inputs.checkout_enabled == 'true' && inputs.semantic_version_enabled == 'true' }}
      id: semantic-version
      uses: PaulHatch/semantic-version@v4.0.2
      with:
        branch: ${{ github.ref }}
        tag_prefix: ${{ inputs.semantic_version_tag_prefix }}
        major_pattern: ${{ inputs.semantic_version_major_pattern }}
        minor_pattern: ${{ inputs.semantic_version_minor_pattern }}
        format: ${{ inputs.semantic_version_format }}
        bump_each_commit: ${{ inputs.semantic_version_bump_each_commit }}
    
    - name: Semantic Version Tag - Timestamp
      if: ${{ inputs.checkout_enabled == 'true' && inputs.semantic_version_enabled == 'true' && inputs.semantic_version_include_timestamp }}
      id: semantic-version-timestamp
      continue-on-error: true
      run: echo "::set-output name=tag::${{ steps.semantic-version.outputs.version }}-$(date +%s)"
      shell: bash

    - name: Set up Docker Context for Buildx
      id: buildx-context
      if: ${{ inputs.setup_docker == 'true' && inputs.buildcloud_org == '' }}
      continue-on-error: true
      run: |
        docker context create builders
      shell: bash

    - name: Set up QEMU
      # if: ${{ inputs.setup_docker == 'true' && inputs.buildcloud_org == '' }}
      if: ${{ inputs.setup_docker == 'true' }}
      continue-on-error: true
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      if: ${{ inputs.setup_docker == 'true' && inputs.buildcloud_org == '' }}
      continue-on-error: true
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        endpoint: builders
        driver-opts: ${{ inputs.driver-opts }}
        driver: ${{ inputs.driver }}
    
    - name: Set up Docker Buildx - Buildcloud
      if: ${{ inputs.setup_docker == 'true' && inputs.buildcloud_org != '' }}
      continue-on-error: true
      uses: docker/setup-buildx-action@v3
      with:
        version: lab:latest
        endpoint: ${{ inputs.buildcloud_org }}
        driver: cloud
        install: true
        driver-opts: ${{ inputs.driver-opts }}
    
    - name: Login to DockerHub
      if: ${{ inputs.username != '' && inputs.password != '' }}
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Login to Alternate Registry
      if: ${{ inputs.registry_username != '' && inputs.registry_password != '' && inputs.registry != '' }}
      uses: docker/login-action@v2
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry_username }}
        password: ${{ inputs.registry_password }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      if: ${{ inputs.ghcr_username != '' && inputs.ghcr_password != '' }}
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_username }}
        password: ${{ inputs.ghcr_password }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: ${{ inputs.aws_access_key_id != '' && inputs.aws_secret_access_key != '' }}
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}
    
    - name: Login to Amazon ECR
      id: login-to-ecr
      uses: aws-actions/amazon-ecr-login@v1
      if: ${{ inputs.aws_access_key_id != '' && inputs.aws_secret_access_key != '' }}
    
    - name: Create ECR Repo if not Exists
      uses: int128/create-ecr-repository-action@v1
      id: create_ecr_repo
      if: ${{ inputs.aws_access_key_id != '' && inputs.aws_secret_access_key != '' &&  inputs.ecr_repository != '' }}
      with:
        repository: ${{ inputs.ecr_repository }}
    
    - name: Prepull Docker Image
      id: prepull-docker-image
      if: ${{ inputs.prepull_image != '' && inputs.setup_docker == 'true' }}
      continue-on-error: true
      run: |
        docker pull ${{ inputs.prepull_image }}
      shell: bash
    
    